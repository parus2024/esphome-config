addressable_lambda:
  name: Balls
  update_interval: 30ms
  lambda: |-
    const int   BallCount = 3;
    const float Gravity = -9.81;
    const int   StartHeight = 1;

    static float Height[BallCount];
    static float ImpactVelocityStart = sqrt(-2 * Gravity * StartHeight);
    static float ImpactVelocity[BallCount];
    static float TimeSinceLastBounce[BallCount];
    static int   Position[BallCount];
    static long  ClockTimeSinceLastBounce[BallCount];
    static float Dampening[BallCount];

    static byte colors[BallCount][3] = { {255,   0,   0},
                                         {0,   255,   0},
                                         {0,     0, 255} };

    if (initial_run)
    {
      ESP_LOGD("effect", "Balls");

      for (int i = 0; i < BallCount; i++)
      {
        ClockTimeSinceLastBounce[i] = millis();
        Height[i] = StartHeight;
        Position[i] = 0;
        ImpactVelocity[i] = ImpactVelocityStart;
        TimeSinceLastBounce[i] = 0;
        Dampening[i] = 0.90 - float(i)/pow(BallCount,2);
      }
    }

    it.all() = Color::BLACK;

    for (int i = 0 ; i < BallCount ; i++)
    {
      TimeSinceLastBounce[i] = millis() - ClockTimeSinceLastBounce[i];
      Height[i] = 0.5 * Gravity * pow(TimeSinceLastBounce[i]/1000, 2.0) + ImpactVelocity[i] * TimeSinceLastBounce[i]/1000;

      if ( Height[i] < 0 )
      {
        Height[i] = 0;
        ImpactVelocity[i] = Dampening[i] * ImpactVelocity[i];
        ClockTimeSinceLastBounce[i] = millis();

        if ( ImpactVelocity[i] < 0.01 )
        {
          ImpactVelocity[i] = ImpactVelocityStart;
        }
      }
      Position[i] = round(Height[i] * (it.size() / 2 - 1) / StartHeight);
    }

    for (int i = 0 ; i < BallCount ; i++)
    {
     it[it.size() / 2 + Position[i]] = Color(colors[i][0], colors[i][1], colors[i][2]);
     it[it.size() / 2 - Position[i]] = Color(colors[i][0], colors[i][1], colors[i][2]);
    }
