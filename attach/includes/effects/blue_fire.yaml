addressable_lambda:
  name: Blue Fire
  update_interval: 5ms
  lambda: |-
    if (initial_run)
    {
      ESP_LOGD("effect", "Blue Fire");
    }

    for( int Pixel = 0; Pixel <= it.size(); Pixel++)
    {
      it[Pixel] = Color(22, 24, 130);
      Color color1;
      uint8_t r1,g1,b1;
      uint8_t r2,g2,b2;
      uint8_t r3,g3,b3;
      int16_t r,g,b;

      color1 = it[Pixel].get();

      //int color2[] = {80,35,0};

      int color2[] = {70, 185, 242};

      //ESP_LOGD("main", "Color1 :(%d,%d,%d)", color1[0],color1[1],color1[2]);

      r1 = (color1[0] ),
      g1 = (color1[1] ),
      b1 = (color1[2] );

      r2 = (color2[0] ),
      g2 = (color2[1] ),
      b2 = (color2[2] );

      // Add Color

      it[Pixel] = Color(constrain(r1+r2, 0, 255), constrain(g1+g2, 0, 255), constrain(b1+b2, 0, 255));
      int rc = random(160);

      // subtract

      color2[0] = rc/4;
      color2[1] = rc/4;
      color2[2] = rc;

      r1 = (color1[0] ),
      g1 = (color1[1] ),
      b1 = (color1[2] );

      r2 = (color2[0] ),
      g2 = (color2[1] ),
      b2 = (color2[2] );

      r=(int16_t)r1-(int16_t)r2;
      g=(int16_t)g1-(int16_t)g2;
      b=(int16_t)b1-(int16_t)b2;

      if(r<0) r=0;
      if(g<0) g=0;
      if(b<0) b=0;

      //ESP_LOGD("main", "Color1 :(%d,%d,%d)", r,g,b);
      // Substract Color

      it[Pixel] = Color(r, g, b);
    }

    #if defined delay
    delay(random(10,120));
    #else
    esphome::delay(random(10,120));
    #endif
