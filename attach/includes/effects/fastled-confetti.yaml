addressable_lambda:
  name: FastLED Confetti
  update_interval: 10ms
  lambda: |-
    static uint8_t thisindex = 0; // Указатель на элемент палитры
    static uint8_t thisinc;
    static uint8_t thisfade;
    static uint8_t thisdiff;

    static int variant = -1;

    if (initial_run)
    {
      ESP_LOGD("effect", "FastLED Confetti");

      it.all() = Color::BLACK;
      fastled_helper::InitLeds(${num_leds});
    }

    if (variant != id(fastled_variant).state)
    {
      if (id(fastled_variant).state > 170)
      {
        thisinc = 2;
        thisfade = 8;
        thisdiff = 64;
      }
      else if (id(fastled_variant).state > 85)
      {
        thisinc = 1;
        thisfade = 1;
        thisdiff = 1;
      }
      else
      {
        thisinc = 1;
        thisfade = 2;
        thisdiff = 32;
      }
      variant = (int)id(fastled_variant).state;
    }

    fadeToBlackBy(fastled_helper::leds, it.size(), thisfade);                                         // Задухание светодиодов на значение thisfade
    uint16_t pos = random16(it.size());
    fastled_helper::leds[pos] = fastled_helper::color_from_palette(thisindex + random8(thisdiff) / 4, current_color); // Munge the values and pick a colour from the palette
    thisindex = thisindex + thisinc;                                                  // base palette counter increments here.

    for (int i = 0; i < it.size(); i++)
    {
      it[i] = Color(fastled_helper::leds[i].r, fastled_helper::leds[i].g, fastled_helper::leds[i].b);
    }
