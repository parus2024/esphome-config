addressable_lambda:
  name: FastLED Plasma
  update_interval: 10ms
  lambda: |-
    #define qsuba(x, b)  ((x>b)?x-b:0) // Analog Unsigned subtraction macro. if result <0, then => 0

    static uint8_t freq1 = 11;
    static uint8_t freq2 = 23;
    static int8_t phase1 = 4;
    static int8_t phase2 = 18;

    static int thisPhase = beatsin8(phase1, -64, 64); // Setting phase change for a couple of waves.
    static int thatPhase = beatsin8(phase2, -64, 64);

    if (initial_run)
    {
      ESP_LOGD("effect", "FastLED Plasma");

      it.all() = Color::BLACK;
      fastled_helper::InitLeds(${num_leds});
    }

    for (int i = 0; i < it.size(); i++)
    {                                                                                               // For each of the LED's in the strand, set a brightness based on a wave as follows:
      int colorIndex = cubicwave8((i * freq1) + thisPhase) / 2 + cos8((i * freq2) + thatPhase) / 2; // Create a wave and add a phase change and add another wave with its own phase change.. Hey, you can even change the frequencies if you wish, but don't change on the fly.
      int thisBright = qsuba(colorIndex, beatsin8(7, 0, 96));                                       // qsub gives it a bit of 'black' dead space by setting sets a minimum value. If colorIndex < current value of beatsin8(), then bright = 0. Otherwise, bright = colorIndex..
      fastled_helper::leds[i] = fastled_helper::color_from_palette(colorIndex, current_color, thisBright);                          // Let's now add the foreground colour.
    }

    for (int i = 0; i < it.size(); i++)
    {
      it[i] = Color(fastled_helper::leds[i].r, fastled_helper::leds[i].g, fastled_helper::leds[i].b);
    }
