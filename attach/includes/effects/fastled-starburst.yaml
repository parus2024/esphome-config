addressable_lambda:
  name: FastLED Starburst
  update_interval: 50ms
  lambda: |-
    // Need
    // - includes/light/stars.h

    #ifdef ESP8266
      #define MAX_NUM_SEGMENTS     16
      #define MAX_SEGMENT_DATA   5120

      #define STARBURST_MAX_FRAG    8 // 52 bytes / star
    #else
      #define MAX_NUM_SEGMENTS     32
      #define MAX_SEGMENT_DATA  32767

      #define STARBURST_MAX_FRAG   10 // 60 bytes / star
    #endif

    /*
      How much data bytes each segment should max allocate to leave enough space for other segments,
      assuming each segment uses the same amount of data. 256 for ESP8266, 640 for ESP32.
    */
    #define FAIR_DATA_PER_SEG (MAX_SEGMENT_DATA / MAX_NUM_SEGMENTS)

    typedef struct particle {
      CRGB     color;
      uint32_t birth  = 0;
      uint32_t last   = 0;
      float    vel    = 0;
      uint16_t pos    = -1;
      float    fragment[STARBURST_MAX_FRAG];
    } star;

    static star* stars;

    static uint8_t numStars                = 0;
    float          maxSpeed                = 375.0f;  // Max velocity
    float          particleIgnition        = 250.0f;  // How long to "flash"
    float          particleFadeTime        = 1500.0f; // Fade out time

    if (initial_run)
    {
      ESP_LOGD("effect", "FastLED Starburst");

      it.all() = Color::BLACK;
      fastled_helper::InitLeds(${num_leds});

      uint16_t maxStars = FAIR_DATA_PER_SEG * 4 / sizeof(star); // ESP8266: max. 4/9/19 stars/seg, ESP32: max. 10/21/42 stars/seg
      numStars = 1 + (${num_leds} >> 3);
      if (numStars > maxStars)
      {
        numStars = maxStars;
      }

      stars = new star[numStars];
    }

    uint32_t now = millis();

    for (int j = 0; j < numStars; j++)
    {
      // speed to adjust chance of a burst, max is nearly always.
      bool doNewStar = random8((144 - ((int)id(fastled_speed).state >> 1))) == 0; // WLEDMM original spawning trigger

      if (doNewStar && stars[j].birth == 0)
      {
        // Pick a random color and location.
        uint16_t startPos = random16(it.size() - 1);
        float multiplier = (float)(random8()) / 255.0 * 1.0;

        stars[j].color = fastled_helper::color_from_palette(random8(), current_color); // CRGB(SEGMENT.color_wheel(random8()));
        stars[j].pos   = startPos;
        stars[j].vel   = maxSpeed * (float)(random8()) / 255.0f * multiplier;
        stars[j].birth = now;
        stars[j].last  = now;
        // more fragments means larger burst effect
        int num = random8(3, 6 + ((int)id(fastled_variant).state >> 5));

        for (int i=0; i < STARBURST_MAX_FRAG; i++)
        {
          if (i < num)
            stars[j].fragment[i] = startPos;
          else
            stars[j].fragment[i] = -1;
        }
      }
    }

    for (int i = 0; i < it.size(); i++)
    {
      fastled_helper::leds[i] = CRGB::Black;
    }

    for (int j = 0; j < numStars; j++)
    {
      if (stars[j].birth != 0)
      {
        float dt = (now - stars[j].last) / 1000.0;

        for (int i = 0; i < STARBURST_MAX_FRAG; i++)
        {
          int var = i >> 1;

          if (stars[j].fragment[i] > 0)
          {
            //all fragments travel right, will be mirrored on other side
            stars[j].fragment[i] += stars[j].vel * dt * (float)var / 3.0;
          }
        }
        stars[j].last = now;
        stars[j].vel -= 3 * stars[j].vel * dt;
      }

      CRGB c = stars[j].color;

      // If the star is brand new, it flashes white briefly.
      // Otherwise it just fades over time.
      float fade = 0.0f;
      float age  = now - stars[j].birth;

      if (age < particleIgnition)
      {
        c = CRGB(fastled_helper::color_blend(CRGB::White, c, 254.5f * ((age / particleIgnition))));
      }
      else
      {
        // Figure out how much to fade and shrink the star based on
        // its age relative to its lifetime
        if (age > particleIgnition + particleFadeTime)
        {
          fade = 1.0f;                  // Black hole, all faded out
          stars[j].birth = 0;
          c = CRGB(current_color.r, current_color.g, current_color.b);
        }
        else
        {
          age -= particleIgnition;
          fade = (age / particleFadeTime);  // Fading star
          byte f = 254.5f * fade;
          c = CRGB(fastled_helper::color_blend(c, CRGB(current_color.r, current_color.g, current_color.b), f));
        }
      }

      float particleSize = (1.0f - fade) * 2.0f;

      for (size_t index=0; index < STARBURST_MAX_FRAG * 2; index++)
      {
        bool mirrored = index & 0x1;
        uint8_t i = index >> 1;
        if (stars[j].fragment[i] > 0)
        {
          float loc = stars[j].fragment[i];
          if (mirrored) loc -= (loc - stars[j].pos) * 2;
          int start = loc - particleSize;
          int end   = loc + particleSize;
          if (start < 0) start = 0;
          if (start == end) end++;
          if (end > it.size()) end = it.size();
          for (int p = start; p < end; p++)
          {
            fastled_helper::leds[p] = c;
          }
        }
      }
    }

    for (int i = 0; i < it.size(); i++)
    {
      it[i] = Color(fastled_helper::leds[i].r, fastled_helper::leds[i].g, fastled_helper::leds[i].b);
    }
