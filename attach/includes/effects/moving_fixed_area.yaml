addressable_lambda:
  name: "Moving Fixed Area"
  update_interval: 20ms
  lambda: |-
    using namespace esphome;

    static int center = 0;  // текущий центр области
    int target = id(led_count);  // желаемый центр области
    const int tail_length = 60;
    const int extra_range = 60;  // диапазон 0-59 для дополнительной подсветки

    // Массив яркости для диодов вне основной области в extra_range
    static float extra_brightness[extra_range] = {0};

    // Шаг изменения яркости за 20ms, чтобы за ~1 секунду пройти от 0 до 1
    const float step = 1.0f / 50.0f;

    // Плавно двигаем центр к цели
    if (center < target) {
      center++;
    } else if (center > target) {
      center--;
    }

    // Выключаем все диоды
    it.all() = Color(0, 0, 0);

    // Вычисляем границы основной области
    int start = center - tail_length / 2;
    int end = start + tail_length;

    // Корректируем границы, чтобы не выйти за пределы ленты
    if (start < 0) {
      start = 0;
      end = tail_length;
    }
    if (end > it.size()) {
      end = it.size();
      start = end - tail_length;
      if (start < 0) start = 0;
    }

    // Заливаем основную область цветом current_color
    for (int i = start; i < end; i++) {
      it[i] = current_color;
    }

    // Обрабатываем плавное включение/выключение диодов 0-49 вне основной области
    for (int i = 0; i < extra_range && i < it.size(); i++) {
      bool in_main_area = (i >= start && i < end);

      if (!in_main_area) {
        // Используем target (id(led_count)) для условия включения/выключения, а не center
          const int THRESHOLD = 100 /* сюда вставьте нужное число (расстояние) при котором вкл\выкл 60 светодиодов */;
          if (target < THRESHOLD) {
          // Плавно увеличиваем яркость до 1
          extra_brightness[i] += step;
          if (extra_brightness[i] > 1.0f) extra_brightness[i] = 1.0f;
        } else {
          // Плавно уменьшаем яркость до 0
          extra_brightness[i] -= step;
          if (extra_brightness[i] < 0.0f) extra_brightness[i] = 0.0f;
        }

        // Формируем цвет с пропорциональной яркостью
        Color add_color = Color(
          (uint8_t)(current_color.r * extra_brightness[i]),
          (uint8_t)(current_color.g * extra_brightness[i]),
          (uint8_t)(current_color.b * extra_brightness[i])
        );

        // Устанавливаем цвет диода
        it[i] = add_color;
      }
    }